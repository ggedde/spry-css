/*!
* Spry Mixins
*/

@use "variables";

/// Min Width Media Query
/// @param {String | Unit} $min - Minimum Value. String must be included in $breakpoints.
/// @output - Contents
@mixin min($min){
	@if type-of($min) == string {
		@media only screen and (min-width: map-get(variables.$breakpoints, $min)) {
			@content;
		}
	} @else {
		@media only screen and (min-width: $min) {
			@content;
		}
	}
}

/// Max Width Media Query
/// @param {String | Unit} $max - Max Value. String must be included in $breakpoints.
/// @output - Contents
@mixin max($max){
	@if type-of($max) == string {
		@media only screen and (max-width: map-get(variables.$breakpoints, $max)) {
			@content;
		}
	} @else {
		@media only screen and (max-width: $max) {
			@content;
		}
	}
}

/// Min - Max Width Media Query
/// @param {String | Unit} $min - Min Value. String must be included in $breakpoints.
/// @param {String | Unit} $max - Max Value. String must be included in $breakpoints.
/// @output - Contents
@mixin in($min, $max){
	@if type-of($min) == string {
		@if type-of($max) == string {
			@media only screen and (min-width: map-get(variables.$breakpoints, $min)) and (max-width: map-get(variables.$breakpoints, $max)) {
				@content;
			}
		} @else {
			@media only screen and (min-width: map-get(variables.$breakpoints, $min)) and (max-width: $max) {
				@content;
			}
		}
	} @else {
		@if type-of($max) == string {
			@media only screen and (min-width: $min) and (max-width: map-get(variables.$breakpoints, $max)) {
				@content;
			}
		} @else {
			@media only screen and (min-width: $min) and (max-width: $max) {
				@content;
			}
		}
	}
}

/// Default Closed UI State
/// @output - Contents
@mixin ui-closed {
	max-height      : 0;
	min-height      : 0;
	opacity         : 0;
	pointer-events  : none;
	pointer-events  : none;
	transform       : scaleY(.8) translateY(-4px) translateZ(0);
	transform-origin: top;
	transition      : transform .1s ease-in-out, opacity .1s ease-in-out, max-height .5s cubic-bezier(0, 1, 0, 1), min-height .5s cubic-bezier(0, 1, 0, 1), padding-block .5s cubic-bezier(0, 1, 0, 1); // Out
	transition-delay: .1s;
	z-index         : 2;

	&.from-left {
		max-height: none;
		transform : scaleX(.8) translateX(-40px) translateZ(0);
	}

	&.from-right {
		max-height: none;
		transform : scaleX(.8) translateX(40px) translateZ(0);
	}

	&.from-bottom {
		max-height      : none;
		transform       : scaleY(.8) translateY(20px) translateZ(0);
		transform-origin: bottom;
	}
}

/// Default Opened UI State
/// @output - Contents
@mixin ui-open {
	max-height    : 100vh;
	opacity       : 1;
	pointer-events: all;
	transform     : translateZ(0) scale(1, 1);
	z-index       : 2;

	&:is(.from-left, .from-right, .from-bottom) {
		transform: none;
	}
}