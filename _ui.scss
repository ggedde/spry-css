.btn,
input,
textarea,
select, 
fieldset {
	transition: color .2s ease-in-out, background-color .2s ease-in-out, border-color .2s ease-in-out;
	appearance: none;
	border: 1px solid map-get($colors, 'grey');
	color: inherit;
	border-radius: 3px;
	padding: 0 1rem;
	background: transparent;
	height: 40px;
	min-width: 40px;
	// line-height: 40px;
	width: 100%;
	display: inline-flex;
	align-items: center;
	justify-content: center;
	text-decoration: none;
	outline: none;
	::placeholder {
		color: #999;
	}
	&:disabled {
		opacity: .6;
		cursor: not-allowed;
	}
	&:focus,
	&:hover {
		border-color: map-get($colors, 'primary');
	}
	&.small,
	.small & {
		height: 30px;
		// line-height: 30px;
		min-width: 30px;
		font-size: 100%;
	}
	&.large,
	.large & {
		height: 50px;
		// line-height: 50px;
		min-width: 50px;
	}
}

.btn,
input[type="submit"] {
	background-color: map-get($colors, 'primary');
	border-color: map-get($colors, 'primary');
	color: white;
	cursor: pointer;
	font-size: 1.15rem;
	padding: 0 1.5rem;
	text-align: center;
	text-transform: uppercase;
	width: auto;
	&:hover,
	&:focus {
		background-color: darken(map-get($colors, 'primary'), 10%);
		border-color: darken(map-get($colors, 'primary'), 10%);
	}
	&.btn-outline {
		color: map-get($colors, 'primary');
		background-color: transparent;
		&:hover,
		&:focus {
			background-color: map-get($colors, 'primary');
			border-color: map-get($colors, 'primary');
			color: white;
		}
	}
	&.btn-outline:active,
	&:active {
		background-color: darken(map-get($colors, 'primary'), 5%);
		border-color: darken(map-get($colors, 'primary'), 5%);
		transition: none;
	}
	svg {
		width: 24px;
		height: 24px;
	}
	&.small,
	.small & {
		svg {
			width: 18px;
			height: 18px;
		}
	}
	&.large,
	.large & {
		svg {
			width: 32px;
			height: 32px;
		}
	}
	&.small,
	.small & {
		font-size: .85rem;
	}
	&.large,
	.large & {
		font-size: 1.3rem;
	}
}

input[type="checkbox"],
input[type="radio"] {
	width: 1rem;
	height: 1rem;
	padding: 0;
	margin: 4px .6rem 0 .4rem;
	position: relative;
	min-width: 0;
	vertical-align: text-bottom;
	&:checked {
		border-color: map-get($colors, 'primary');
		&::after {
			content: '';
			position: absolute;
			inset: 2px;
			background-color: map-get($colors, 'primary');
			border-radius: 2px;
		}
	}
	+ span {
		float: left;
		display: block;
		width: calc(100% - 40px);
	}
}
input[type="radio"] {
	&,
	&:checked::after {
		border-radius: 50%;
	}
}

select {
	background-image     : url("data:image/svg+xml;utf8,<svg fill='gray' xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><path d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");
	background-repeat    : no-repeat;
	background-position-x: 95%;
	background-position-y: 52%;
}



fieldset {
	display: block;
	padding: 0;
	line-height: 1.6;
	position: relative;
	height: auto;
	transition: color .2s ease-in-out, border-color .2s ease-in-out;
	legend {
		display: block;
		position: relative;
		height: 0;
		max-width: 0;
		white-space: nowrap;
		transform: translate(4px, 9px);
		user-select: none;
		transition: transform .2s ease-in-out, max-width .2s ease-in-out;
		margin-left: 5px;
		padding: 0;
		@media screen and (min-width: map-get($breakpoints, 'md')) {
			transform: translate(4px, 7px);
		}
		label {
			display: block;
			transform: scale(1);
			transition: all .2s ease-in-out;
			pointer-events: none;
			opacity: .6;
		}
	}
	input,
	select,
	textarea {
		border: 0;
		padding-left: 10px;
		padding-bottom: 1px;
		display: block;
		margin: 0;
	}
	&.active legend,
	&:focus-within legend {
		transform: translateY(-11px);
		max-width: 300px;
		label {
			padding: 0 .5rem;
			font-size: .9rem;
			opacity: 1;
		}
	}
	&:focus-within {
		border-color: map-get($colors, 'primary');
		legend label {
			color: map-get($colors, 'primary');
		}
	}
	&.small,
	.small &,
	&.large,
	.large & {
		height: auto;
		min-height: 0;
	}
	&.small,
	.small & {
		line-height: 1.3;
	}
	&.large,
	.large & {
		line-height: 1.8;
	}
}

textarea {
	min-height: 100px;
	padding: .75rem;
	max-width: 100%;
	line-height: 1.2;
	.small &,
	&.small {
		min-height: 60px;
		line-height: 1.2;
	}
	.large &,
	&.large {
		min-height: 200px;
		line-height: 1.2;
	}
}

@keyframes spinner {
	to {
		transform: rotate(360deg);
	}
}

.has-loader {
	position: relative;
	&::after {
		content: '';
		box-sizing: border-box;
		position: absolute;
		inset: 0;
		margin: auto;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		border: 2px solid transparent;
		border-top-color: #fff;
		border-right-color: #fff;
		animation: spinner .7s ease infinite;
		opacity: 0;
		pointer-events: none;
		transition: opacity .3s ease-in-out .1s;
	}
	&.loading {
		pointer-events: none;
		user-select: none;
		cursor: default;
		color: transparent;
		&::after {
			opacity: 1;
		}
	}
	.small &,
	&.small {
		&::after {
			width: 16px;
			height: 16px;
		}
	}
}

table {
	width: 100%;
	margin-top: 1rem;
	border-collapse: collapse;
	td,
	th {
		padding: .6rem .2rem;
		text-align: left;
	}
	thead th {
		font-weight: 500;
	}
	tbody tr {
		&:hover td {
			background-color: rgba(map-get($colors, 'primary'),.04);
		}
		td {
			border-top: 1px solid map-get($colors, 'light');
		}
		&:first-child td {
			border-color: darken(map-get($colors, 'light'), 10%);
		}
	}
}

nav ul li {
	display: inline-block;
}

hr {
	height: 1px;
	border: 0;
	background-color: map-get($colors, 'grey' );
	margin: map-get($gaps, 'default');
}

section {
	padding: (map-get($gaps, 'default') * 2) map-get($gaps, 'default');
}

@each $breakpoint, $breakpoint_width in $breakpoints {
	@if map-get($gaps, $breakpoint) {
		@media screen and (min-width: $breakpoint_width) {
			hr {
				margin: map-get($gaps, $breakpoint);
			}
			section {
				padding: (map-get($gaps, $breakpoint) * 2) map-get($gaps, $breakpoint);
			}
		}
	}
}

@each $color_name, $color_value in $colors {
	section.bg-#{$color_name} + section.bg-#{$color_name} {
		padding-top: 0;
	}
}