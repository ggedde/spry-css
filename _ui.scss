/*!
* Spry UI
*/
@use "variables"as *;

button,
[role=button],
[role=alert],
[role=tab],
menu a,
nav a,
input,
textarea,
select,
.toolbar,
.badge,
article>header,
article>footer {
	position       : relative;
	appearance     : none;
	color          : inherit;
	background     : transparent;
	min-height     : 2.3em;
	min-width      : 2.3em;
	height         : auto;
	padding-inline : 1em;
	padding-block  : .3em;
	width          : 100%;
	display        : inline-flex;
	align-items    : center;
	text-decoration: none;
	outline        : none;
	vertical-align : middle;
	border         : 0;
	font-size      : 100%;
	margin         : 0;
}

.compact,
.badge {
	min-height    : 1.7em;
	min-width     : 1.7em;
	padding-block : 0em;
	padding-inline: 0.5em;
}


button,
[role=button],
[role=tab],
input[type=submit] {
	width         : auto;
	cursor        : pointer;
	font-weight   : 400;
	text-align    : center;
	text-transform: uppercase;
}

.badge {
	font-weight: 500;
	width      : auto;
	&.snug {
		translate: -1em -.7em;
	}
}

:is(input, textarea, select):not([role=button]):hover,
:is(input, textarea, select):not([role=button]):focus {
	border-color: var(--color);
}

:is(input, textarea, select):not([role=button]):focus {
	box-shadow: inset 0 0 0 1px var(--color);
}

:is(input, textarea, select, a, button),
[role=button].menu [type=checkbox] {
	outline: none;
}

:is(input, textarea, select, a, button):focus-visible:not(:hover),
[role=button]:has(:focus-visible),
[role=tab]:has(:focus-visible) {
	outline       : 2px solid rgba(140, 140, 140, 0.25);
	outline-offset: 2px;
}

:is([type=checkbox], [type=radio]):focus-visible:not(:hover) {
	outline-width: 4px;
}

button,
[role=button],
[role=alert],
[role=tab],
.badge,
menu a,
menu button,
input,
textarea,
select,
article {
	border         : 1px solid;
	border-color   : rgba(var(--text-color-rgb), .5);
	border-radius  : 3px;
	justify-content: center;
	transition     : color .2s ease-in-out, background .2s ease-in-out, border .15s ease-in-out, filter .2s ease-in-out;
}

a {
	cursor    : pointer;
	transition: color .1s ease-in-out;

	&:hover,
	&:focus {
		text-decoration: none;
	}
}

::placeholder {
	opacity: .7;
}

[role=alert] {
	justify-content: flex-start;
	padding        : .5em 1em;

	svg {
		min-width: 1em;
	}

	&:has(.close:checked) {
		transition      : all 10s cubic-bezier(0, 1, 0, 1), opacity .5s cubic-bezier(0, 1, 0, 1);
		transform       : scaleY(0);
		transform-origin: top center;
		max-height      : 0;
		min-height      : 0;
		opacity         : 0;
		padding-block   : 0;
		overflow        : hidden;
		pointer-events  : none;
		margin-block    : 0;
	}
}

:is(button, [role=button], [role=tab], input, textarea, select, form, menu a, menu button):disabled {
	opacity       : .6;
	pointer-events: none;
}

label:not([role=button])> :is([type=checkbox], [type=radio]) {
	margin : 0 .6em 0 .4em;
	padding: 0;
}

:is([type=checkbox], [type=radio]):not([role=button], .icon) {
	padding   : 0;
	width     : 1em;
	min-height: 1em;
	position  : relative;
	min-width : 0;

	&:checked {
		border-color: var(--color);

		&::after {
			content         : '';
			position        : absolute;
			inset           : 2px;
			background-color: var(--color);
			border-radius   : 2px;
		}
	}
}

[type=radio]:not([role=button], .icon, i) {

	&,
	&:checked::after {
		border-radius: 50%;
	}
}

form.disabled :is(input, select, textarea, label, button) {
	pointer-events: none;
	opacity       : 0.8;
}

.toggle {
	cursor  : pointer;
	position: relative;

	input {
		appearance: none;
		border    : 0;
	}

	li>& {
		position : absolute;
		right    : .5em;
		top      : .25em;
		font-size: 80%;
	}
}

.horizontal>ul>li>ul,
.toggle+* {
	transition-delay: .1s;
	transform-origin: top;
	transition      : transform .1s ease-in-out, opacity .1s ease-in-out, max-height .5s cubic-bezier(0, 1, 0, 1), padding-block .5s cubic-bezier(0, 1, 0, 1); // Out
}

.horizontal>ul>li>ul,
.toggle:not(:checked)+* {
	max-height    : 1px;
	min-height    : 0;
	opacity       : 0;
	padding-block : 0;
	pointer-events: none;
	transform     : scaleY(.8) translateY(-4px);
	z-index       : 2;
	pointer-events: none;
}

.toggle:has(:checked)+*,
.toggle:checked+*,
.toggle.hoverable:hover+*,
.toggle+.open,
.hoverable>ul>li:hover>ul {
	max-height    : 100vh;
	opacity       : 1;
	pointer-events: all;
	transform     : scaleY(1.000001);
}

.toggle:not(:checked)+* .toggle+*,
.hoverable>ul>li>.toggle {
	pointer-events: none;
}

.toggle:not(:checked)+.open .toggle+*,
.hoverable>ul>li:hover>.toggle:not(:checked)+*,
.hoverable>ul>li:hover .toggle:checked+*,
.hoverable>ul>li:hover>ul {
	pointer-events: all;
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {

		.#{$breakpoint}-horizontal>ul>li>ul {
			max-height      : 1px;
			min-height      : 0;
			opacity         : 0;
			padding-block   : 0;
			pointer-events  : none;
			transform       : scaleY(.8) translateY(-4px);
			transition-delay: .1s;
			transform-origin: top;
			transition      : transform .1s ease-in-out, opacity .1s ease-in-out, max-height .5s cubic-bezier(0, 1, 0, 1), padding-block .5s cubic-bezier(0, 1, 0, 1); // Out
			z-index         : 2;
			pointer-events  : none;
		}

		.toggle.#{$breakpoint}-hoverable:hover+*,
		.toggle+.#{$breakpoint}-open,
		.#{$breakpoint}-hoverable>ul>li:hover>ul {
			max-height    : 100vh;
			opacity       : 1;
			pointer-events: all;
			transform     : scaleY(1.000001);
			z-index       : 4;
		}

		.#{$breakpoint}-hoverable>ul>li>.toggle {
			pointer-events: none;
		}

		.toggle:not(:checked)+.#{$breakpoint}-open .toggle+*,
		.#{$breakpoint}-hoverable>ul>li:hover>.toggle:not(:checked)+*,
		.#{$breakpoint}-hoverable>ul>li:hover .toggle:checked+*,
		.#{$breakpoint}-hoverable>ul>li:hover>ul {
			pointer-events: all;
		}
	}
}

ul:has(:focus-visible) {
	max-height    : 100vh;
	opacity       : 1;
	pointer-events: all;
	transform     : scaleY(1.000001);
	pointer-events: all;
}

:is(button, .badge, [role=button], [role=tab], [role=alert], input[type=submit]) {
	background-color: var(--color);
	border-color    : var(--color);
}

:is(button, .badge, [role=button], [role=tab], [role=alert], i:empty, .icon, input[type=submit]) {
	color: var(--text-color);

	&:is(.outline, .hazy, .link) {
		--text-color: var(--color);
		color       : var(--text-color);
	}

	&:is(.link, .hazy) {
		border-color: transparent;
	}

	&:is(.link, .outline) {
		background: none;
	}

	&.hazy {
		background-color: rgba(var(--color-rgb), .1);
	}

	&.outline {
		border-width: 1px;
		border-style: solid;
		border-color: var(--color);
	}

	svg {
		fill      : currentColor;
		transform : scale(1);
		transition: all .2s ease-in-out;
		display   : block;
	}
}

:is(i:empty, .icon:empty):is(.outline, .hazy) {
	width : 2em;
	height: 2em;
}

:is(button, [role=button], [role=tab], input[type=submit]) {

	&:is(.link, .outline) {

		&:hover:not(:active),
		&:focus:not(:active),
		&:focus-within:not(:active) {
			background-color: rgba(var(--color-rgb), 0.1);
		}
	}

	&.hazy {

		&:hover:not(:active),
		&:focus:not(:active),
		&:focus-within:not(:active) {
			background-color: rgba(var(--color-rgb), 0.2);
		}
	}
}

:is(button, [role=button], [role=tab], a:not([role=button]), input[type=submit]) {

	&:hover:not(:active),
	&:focus:not(:active),
	&:focus-within:not(:active) {
		filter: brightness(1.15);
	}
}

button svg,
[role=button] svg,
[role=tab] svg,
[role=alert] svg,
menu svg,
i svg,
.icon svg {
	width : 1.25em;
	height: 1.25em;
}

:is(menu li > a, menu li > button, menu li > label) {
	background-color: transparent;
	justify-content : flex-start;

	>input {
		margin-left : 0;
		margin-right: 1em;
	}

	&:focus,
	&:focus-within,
	&:hover {
		background-color: rgba(var(--color-rgb), 0.1);
	}
}

button.link,
[role=button].link,
[role=tab].link,
menu a,
menu button {
	text-transform: capitalize;
}

:is(nav, menu) {
	position: relative;

	&,
	>a,
	li>[role=button]:only-child,
	>button,
	li>a,
	li>button {
		width          : 100%;
		text-align     : left;
		justify-content: flex-start;
		border         : 0;
	}

	ul {
		min-width: 200px;
	}

	li {
		position: relative;
		width   : 100%;
		display : block;
		border  : 0;

		>* {
			justify-content: flex-start;
		}

		>*:not(.toggle) {
			width: 100%;
		}
	}

	&.outline {
		border: 1px solid rgba(var(--color-rgb, '140,140,140'), .5);

		ul,
		menu {
			border: inherit;
		}

		>a,
		li {
			border-top: inherit;

			&:first-child {
				border-top: 0;
			}
		}
	}

	&.horizontal {
		display: flex;

		>* {
			width: auto;
		}

		>ul {

			display  : flex;
			flex-wrap: wrap;
			position : relative;

			>a,
			>li {

				display    : inline-flex;
				align-items: center;
				width      : auto;

				>ul {
					position : absolute;
					top      : 100%;
					max-width: 300px;
				}
			}

			>li:has(>a+.toggle)>a {
				padding-right: 2.5em;
			}
		}

		&.outline {

			>a,
			li {
				border-top  : 0;
				border-right: inherit;
			}
		}
	}

	@each $breakpoint,
	$breakpoint_width in $breakpoints {
		@media screen and (min-width: $breakpoint_width) {
			&.#{$breakpoint}-horizontal {
				display: flex;

				>* {
					width: auto;
				}

				>ul {

					display  : flex;
					flex-wrap: wrap;
					position : relative;

					>a,
					>li {

						display    : inline-flex;
						align-items: center;
						width      : auto;

						>ul {
							position : absolute;
							top      : 100%;
							max-width: 300px;
						}
					}

					>li:has(>a+.toggle)>a {
						padding-right: 2.5em;
					}
				}

				&.outline {

					>a,
					li {
						border-top  : 0;
						border-right: inherit;
					}
				}
			}
		}
	}
}

menu {

	:is(menu, ul) li>a {
		padding-left: 2em;
	}

	li:has(:not(.toggle):checked) {
		background-color: rgba(var(--color-rgb), 0.2);
	}
}

.toolbar {
	justify-content: space-between;
}

:is(button, [role=button], [role=tab]) {
	position: relative;

	// input:not([role=button], .icon, i) {
	// 	padding   : 0;
	// 	margin    : 0;
	// 	width     : 0;
	// 	height    : 0;
	// 	min-height: 0;
	// 	z-index   : -1;
	// }
}

:is([role=button], [role=tab]):has(input) svg:nth-of-type(2) {
	opacity  : 0;
	transform: scale(.5);
}

:is([role=button], [role=tab]):has(:checked) svg:nth-of-type(1) {
	opacity  : 0;
	transform: scale(.5);
}

:is([role=button], [role=tab]):has(:checked) svg:nth-of-type(2) {
	opacity  : 1;
	transform: scale(1);
}

i:has(svg) {
	position: relative;
}

.show-invalid :not(:focus):user-invalid {
	border-color: #ff0000;
}

.icon,
i:empty,
i:has(svg) {
	transition: rotate .15s ease-in-out;
	display   : inline-flex;
	width     : 1em;
	height    : 1em;
}

.icon svg,
i svg {
	position: absolute;
	margin  : auto;
	inset   : 0;
	fill    : currentColor;
}

:is(.icon, i:empty) {

	input:not([role=button]) {
		border        : 0;
		pointer-events: none;
		opacity       : 0;
		height        : 0;
		height        : 0;
		margin-left   : 0;
		margin-right  : 0;
		padding       : 0;
	}

	&:is(.up, .down, .prev, .next, .close, .search, .copy, .checkmark, .menu, .dots)::after {
		border       : .15em solid var(--text-color);
		border-left  : 0;
		border-bottom: 0;
		width        : .7em;
		height       : .7em;
		transform    : rotate(135deg) translate(-.1em, .1em);
	}

	&::before,
	&::after {
		content   : '';
		position  : absolute;
		margin    : auto;
		inset     : 0;
		display   : block;
		transition: all .25s cubic-bezier(.25, .8, .25, 1);
	}

	&.text-right::before {
		order: -2;
	}

	&.text-right::after {
		order: -1;
	}

	&.up::after {
		transform: rotate(315deg) translate(-.1em, .1em);
	}

	&.next::after {
		transform: rotate(45deg) translate(-.1em, .1em);
	}

	&.prev::after {
		transform: rotate(225deg) translate(-.1em, .1em);
	}

	&.question::after {
		content: '?';
	}

	&.info::after {
		content: '!';
	}

	&.question::after,
	&.info::after {
		font-style     : normal;
		display        : flex;
		align-items    : center;
		justify-content: center;
		font-size      : 130%;
	}

	&:is(.menu, .dots, .close, .search) {

		&::before,
		&::after {
			content         : '';
			background-color: var(--text-color);
			height          : 1.2em;
			margin          : auto;
			width           : .12em;
			box-shadow      : none;
		}

		&::before {
			transform: rotate(45deg);
			order    : 1;
		}

		&::after {
			transform: rotate(-45deg);
		}
	}

	&.search:not(:checked, :has(:checked)) {
		&::before {
			background-color: transparent;
			border          : .15em solid var(--text-color);
			border-radius   : 50%;
			height          : 0.75em;
			width           : 0.75em;
			transform       : translate(-.1em, -.1em);
		}

		&::after {
			background-color: var(--text-color);
			border-radius   : 3px;
			height          : 0.15em;
			width           : 0.5em;
			transform       : translate(.3em, .3em) rotate(45deg);
		}
	}

	&.copy,
	&.checkmark:not(:checked, :has(:checked)) {
		&::after {
			border-width: .12em;
			width       : 1.1em;
			height      : 0.6em;
			transform   : rotate(130deg) translate(-0.1em, 0.1em);
		}
	}

	&.copy:checked {
		transform: rotate(180deg);
	}

	&.copy:not(:checked, :has(:checked)) {

		&::before,
		&::after {
			background-color: transparent;
			border          : .12em solid var(--text-color);
			height          : 0.8em;
			width           : 0.7em;
			transform       : translate(.1em, .1em);
		}

		&::before {
			border-right : 0;
			border-bottom: 0;
			transform    : translate(-.1em, -.1em);
		}
	}


	&.menu:not(:checked, :has(:checked)),
	&.dots:not(:checked, :has(:checked)) {

		&::before,
		&::after {
			background-color: var(--text-color);
			transform       : translate(0, -.4em) rotate(90deg);
			height          : 1.4em;
			width           : .12em;
		}

		&::after {
			transform : translate(0, .4em) rotate(-90deg);
			box-shadow: .4em 0 0 var(--text-color);
		}

		&:focus {
			box-shadow: none;
		}
	}

	&.dots:not(:checked, :has(:checked)) {

		&::before,
		&::after {
			height       : .2em;
			width        : .2em;
			border-radius: 50%;
		}
	}

	&:has(:checked)::after,
	&.icon:checked::after {
		rotate: 180deg;
	}
}

.icon,
i:empty {
	position: relative;
}

:is(button, [role=button], [role=tab]) :is(.icon, i:empty),
input.toggle:not(.icon) {
	border-color: transparent;
	min-height  : 0;
	min-width   : 0;
	padding     : 0;
	border      : 0;
	display     : block;
}

select {
	background-image   : url("data:image/svg+xml;utf8,<svg fill='gray' xmlns='http://www.w3.org/2000/svg' viewBox='-20 -6 40 36'><path d='M7.41 8.58 12 13.17l4.59-4.59L18 10l-6 6-6-6 1.41-1.42z'/></svg>");
	background-repeat  : no-repeat;
	background-position: 95%;
	padding-right      : 1.7em;
	line-height        : 1.55;

	option {
		background: #eee;
		color     : #333;
	}
}

textarea {
	min-height : 8em;
	max-height : 500px;
	padding    : .75rem;
	max-width  : 100%;
	min-width  : 100%;
	line-height: 1.2;
}

@keyframes labelOut {

	0%,
	100% {
		opacity: .7,
	}

	50% {
		opacity: 0;
	}
}

label {
	position: relative;
	display : block;

	sup,
	sub {
		position        : absolute;
		transform       : translate(10px, -50%);
		top             : 50%;
		transition      : all .2s ease-in-out;
		transform-origin: left;
		opacity         : 0.7;
	}

	&:has(textarea) {

		sup,
		sub {
			top: 19px;
		}
	}

	&:focus-within,
	&:has(input:not(:placeholder-shown)),
	&:has(textarea:not(:placeholder-shown)),
	&:has(select option:not(:disabled):checked) {

		:is(sup, sub) {
			transform  : translate(3px, -50%) scale(0.85);
			top        : -12px;
			font-weight: 500;
		}

		sub {
			top: calc(100% + 11px);
		}
	}

	&:focus-within :is(sup, sub) {
		color: var(--color);
	}

	// &:focus-within:not(.active) :is(sup, sub),
	&:focus-within:has(input:placeholder-shown) :is(sup, sub),
	&:focus-within:has(textarea:placeholder-shown) :is(sup, sub),
	&:focus-within:has(select option:disabled:checked) :is(sup, sub) {
		animation: labelOut .2s ease-in-out;
	}

	&:has(sup) {
		margin-top: 1rem;
	}

	&:has(sub) {
		margin-bottom: 1rem;
	}
}

@keyframes spinner {
	0% {
		transform: rotate(0deg)
	}

	90%,
	100% {
		transform: rotate(360deg)
	}
}

[aria-busy] {
	position: relative;

	&::after {
		content       : '';
		box-sizing    : border-box;
		position      : absolute;
		inset         : 0;
		margin        : auto;
		width         : 1.3em;
		height        : 1.3em;
		border-radius : 50%;
		border        : .15em solid transparent;
		border-color  : var(--text-color) var(--text-color) transparent transparent;
		opacity       : 0;
		pointer-events: none;
		transition    : opacity .3s ease-in-out .1s;
	}
}

[aria-busy=true],
:is(button, [role=button], [role=tab], input[type=submit])[aria-busy=true] {
	pointer-events: none;
	user-select   : none;
	cursor        : default;
	color         : transparent;

	&::after {
		opacity  : 1;
		animation: spinner .8s ease infinite;
	}
}

article {
	--card-color    : var(--faint);
	background-color: white;
	border-color    : var(--card-color);
	display         : flex;
	flex-direction  : column;
	align-items     : flex-start;
	justify-content : flex-start;
	gap             : 2em;
	padding         : 2em;
	position        : relative;
	transition      : none;

	&:has(>header),
	&:has(>footer) {
		padding: 0;

		>header,
		>footer,
		>p,
		>div {
			padding-inline: 1em;
		}
	}

	>header,
	>footer {
		background-color: var(--card-color);
		color           : var(--color-text);
		display         : flex;
		justify-content : space-between;
		align-items     : center;
	}

	>footer {
		margin-top: auto;
	}

	>header,
	>footer,
	>div,
	>p,
	>h1,
	>h2,
	>h3,
	>h4,
	>h5,
	>h6 {
		width: 100%;
	}
}

.toobar,
article>header,
article>footer {
	min-height: 2.9em;
}

table {
	width          : 100%;
	margin-top     : 1em;
	border-collapse: collapse;

	td,
	th {
		padding   : 1em .5em;
		text-align: left;
	}

	thead th {
		font-weight  : 500;
		border-bottom: 2px solid var(--faint);
	}

	tbody tr {
		&:hover td {
			background-color: rgba(var(--color-rgb), .04);
		}

		td {
			border-top    : 1px solid var(--faint);
			vertical-align: text-top;
		}

		&:first-child td {
			border-color: var(--faint);
		}
	}
}

hr {
	height          : 1px;
	border          : 0;
	background-color: map-get($colors, 'default');
	margin          : var(--gap);
}

section {
	padding: (calc(var(--gap) * 2)) var(--gap);
}

[role=tooltip] {
	width           : 100vw;
	max-width       : 300px;
	position        : absolute;
	cursor          : auto;
	border-radius   : 5px;
	background-color: var(--light);
	padding         : 1em;
	z-index         : 2;
}

:has(>[role=tooltip]) {
	position: relative;

	&:hover {
		z-index: 2;
	}

	[role=tooltip] {
		width     : 90vw;
		position  : absolute;
		transition: opacity .2s ease-in-out;
		cursor    : auto;
	}

	&:not(:hover) [role=tooltip] {
		opacity       : 0;
		pointer-events: none;
	}
}