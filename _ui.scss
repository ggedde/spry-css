.btn,
button,
input,
textarea,
select,
nav>a,
.toolbar,
nav li>a,
fieldset {
	position       : relative;
	appearance     : none;
	color          : inherit;
	background     : transparent;
	min-height     : clamp(34px, 5vw, 40px);
	min-width      : clamp(34px, 5vw, 40px);
	height         : auto;
	padding        : 0 1rem;
	width          : 100%;
	display        : inline-flex;
	align-items    : center;
	text-decoration: none;
	outline        : none;
	vertical-align : middle;
	border         : 0;
}

button {
	width: auto;
}

.btn,
input,
textarea,
select,
nav>a,
nav li,
.toolbar,
fieldset {

	&.large,
	&.large a,
	&.large button,
	.large & {
		min-height: clamp(44px, 5vw, 50px);
		min-width : clamp(44px, 5vw, 50px);
	}

	&.small,
	&.small a,
	&.small button,
	.small & {
		min-height: clamp(26px, 5vw, 30px);
		min-width : clamp(26px, 5vw, 30px);
	}

	&.tiny,
	&.tiny a,
	&.tiny button,
	.tiny & {
		min-height: 24px;
		min-width : 24px;
	}


}

// .btn,
// input,
// textarea,
// select,
// nav>a,
// nav li,
// fieldset {

// 	&.small,
// 	.small &,
// 	&.tiny,
// 	.tiny & {
// 		font-size: 100%;
// 	}
// }

.btn,
input,
textarea,
select,
nav.list li>a,
nav.list li>button,
fieldset {
	transition     : color .2s ease-in-out, background-color .2s ease-in-out, border-color .2s ease-in-out;
	border         : 1px solid map-get($colors, 'grey');
	color          : inherit;
	border-radius  : 3px;
	justify-content: center;

	::placeholder {
		color: #999;
	}

	&:disabled {
		opacity: .6;
		cursor : not-allowed;
	}

	&:focus,
	&:focus-within,
	&:hover {
		border-color: map-get($colors, 'primary');
		color       : inherit;
	}
}

input.toggle {
	appearance: none;
	display   : none;
	border    : 0 !important;
}

nav>ul>li>ul,
input.toggle.collapse+label+* {
	max-height    : 0;
	pointer-events: none;
}

label.toggle,
.toggle+label {
	cursor: pointer;
}

label.toggle+*,
nav>ul>li>ul,
.toggle+label+* {
	opacity         : 0;
	pointer-events  : none;
	transform       : scaleY(.8) translateY(-4px);
	transform-origin: top;
	transition      : transform .2s .05s ease-in-out, opacity .2s .05s ease-in-out, max-height .3s ease-in-out;
	position        : relative;
	z-index         : 1;
}

.toggle:checked+label+*,
.toggle.collapse:checked+label+*,
label.toggle.hoverable:hover+*,
label.hoverable:hover+*,
nav.horizontal>ul>li:hover>ul,
nav li>ul:focus-within {
	opacity       : 1;
	pointer-events: all;
	transform     : scaleY(1);
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {
		nav.#{$breakpoint}-hoverable>ul>li:hover>ul {
			opacity       : 1;
			pointer-events: all;
			transform     : scaleY(1);
		}
	}
}

.toggle.collapse:checked+label+*,
label.toggle.hoverable:hover+*,
nav li>ul:focus-within,
nav.horizontal>ul>li:hover>ul,
nav li input.toggle.collapse+label+ul:focus-within {
	max-height: 2000px;
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {
		nav.#{$breakpoint}-hoverable>ul>li:hover>ul {
			max-height: 2000px;
		}
	}
}

.btn,
nav.list li>a,
nav.list li>button,
input[type="submit"] {
	background-color: map-get($colors, 'primary');
	border-color    : map-get($colors, 'primary');
	cursor          : pointer;
	text-align      : center;
	text-transform  : uppercase;
	width           : auto;

	&:hover,
	&:focus,
	&:focus-within {
		background-color: darken(map-get($colors, 'primary'), 10%);
		border-color    : darken(map-get($colors, 'primary'), 10%);
		color           : white;
	}

	&.btn-outline {
		color           : map-get($colors, 'primary');
		background-color: transparent;

		&:hover,
		&:focus,
		&:focus-within {
			background-color: map-get($colors, 'primary');
			border-color    : map-get($colors, 'primary');
			color           : white;
		}
	}

	&.btn-outline:active,
	&:active {
		background-color: darken(map-get($colors, 'primary'), 5%);
		border-color    : darken(map-get($colors, 'primary'), 5%);
		transition      : none;
	}

	svg {
		width : 24px;
		height: 24px;
	}

	&.large,
	.large & {
		svg {
			width : 32px;
			height: 32px;
		}
	}

	&.small,
	.small &,
	&.tiny,
	.tiny & {
		svg {
			width : 18px;
			height: 18px;
		}
	}
}

.btn,
input[type="submit"] {
	font-weight: normal;
	font-size  : 115%;
	color      : map-get($colors, 'white');

	&.small,
	.small & {
		font-size: 100%;
	}

	&.tiny,
	.tiny & {
		font-size: 85%;
	}

	&.large,
	.large & {
		font-size: 130%;
	}
}

.btn.btn-link,
nav.list li>a,
nav.list li>button {
	background-color: transparent;
	border-color    : transparent;
	text-transform  : capitalize;
	padding-top     : 0.5rem;
	padding-bottom  : 0.5rem;

	&:hover,
	&:focus,
	&:focus-within {
		background-color: rgba(map-get($colors, 'primary'), 10%);
		border-color    : transparent;
		color           : map-get($colors, 'primary');
	}

	&:active {
		background-color: rgba(map-get($colors, 'primary'), 20%);
		transition      : none;
	}
}

.btn.btn-link {
	color: map-get($colors, 'primary');
}

nav {
	ul {
		min-width: 200px;
	}

	li {
		position: relative;
		width   : 100%;
		display : block;
		border  : 0;
	}

	&.horizontal {

		>ul {
			display  : flex;
			flex-wrap: wrap;
		}

		>a,
		>ul>li {

			display    : inline-flex;
			align-items: center;
			width      : auto;

			>.btn-toggle {
				position      : relative;
				display       : inline-block;
				margin-left   : 6px;
				pointer-events: none;
			}

			>ul {
				position : absolute;
				top      : 100%;
				max-width: 300px;
			}
		}
	}

	@each $breakpoint,
	$breakpoint_width in $breakpoints {
		@media screen and (min-width: $breakpoint_width) {
			&.#{$breakpoint}-horizontal {

				>ul {
					display  : flex;
					flex-wrap: wrap;
				}

				>a,
				>ul>li {

					display    : inline-flex;
					align-items: center;
					width      : auto;

					>.btn-toggle {
						position      : relative;
						display       : inline-block;
						margin-left   : 6px;
						pointer-events: none;
					}

					>ul {
						position : absolute;
						top      : 100%;
						min-width: 220px;
						max-width: 300px;
					}
				}
			}
		}
	}

	&.list {

		&,
		>a,
		>button,
		li>a,
		li>button {
			width          : 100%;
			border         : 0;
			text-align     : left;
			justify-content: flex-start;
		}

		li {
			font-size: 1.15rem;

			&.small,
			.small & {
				font-size: 1rem;
			}

			&.tiny,
			.tiny & {
				font-size: .85rem;
			}

			&.large,
			.large & {
				font-size: 1.3rem;
			}
		}
	}
}

nav li>a,
nav li>button,
nav.list li>button,
nav.list li>a {
	line-height: 1.2;

	&.truncate {
		display: block;
	}
}

nav li.small>a,
nav li.tiny>a {
	padding-right: 2rem;
}

.btn-menu {
	position: relative;
	padding : 0;

	span {
		background-color: map-get($colors, 'light');
		width           : 60%;
		position        : absolute;

		&,
		&::before,
		&::after {
			border-radius: 3px;
			bottom       : 0;
			color        : transparent !important;
			display      : block;
			height       : 2px;
			margin       : auto;
			inset        : 0;
			transition   : transform .15s ease-in-out;
		}

		&::before,
		&::after {
			content         : '';
			position        : absolute;
			transform       : translateY(-6px);
			background-color: inherit;
			width           : 100%;
		}

		&::after {
			transform: translateY(6px);
		}
	}

	&.small span {

		&::before,
		&::after {
			transform: translateY(-5px);
		}

		&::after {
			transform: translateY(5px);
		}
	}

	&.tiny span {

		&::before,
		&::after {
			transform: translateY(-4px);
		}

		&::after {
			transform: translateY(4px);
		}
	}

	&.large span {

		&,
		&::before,
		&::after {
			height: 3px;
		}

		&::before,
		&::after {
			transform: translateY(-9px);
		}

		&::after {
			transform: translateY(9px);
		}
	}

	&.btn-link {
		span {
			background-color: map-get($colors, 'primary');
		}
	}
}

:checked+.btn-menu,
.btn-menu.open {
	span {
		transform: rotate(45deg);

		&::before,
		&::after {
			transform: rotate(0deg);
		}

		&::after {
			transform: rotate(-90deg);
		}
	}
}

.btn-toggle {
	padding: 0;

	&::after {
		content      : '';
		display      : block;
		position     : absolute;
		inset        : 0;
		margin       : auto;
		border       : 2px solid map-get($colors, 'light');
		border-left  : 0;
		border-bottom: 0;
		width        : 32%;
		height       : 32%;
		transition   : transform .2s ease-in-out;
		transform    : rotate(135deg) translate(-14%, 16%);
	}

	&.btn-link {
		&::after {
			border-color: map-get($colors, 'primary');
		}
	}

	nav li>& {
		position: absolute;
		right   : 2px;
		top     : 0;
	}

	nav.list li>& {
		top: 2px;
	}
}

.btn-close {
	padding: 0;
	margin : 0;

	&::before,
	&::after {
		background-color: map-get($colors, 'light');
		content         : '';
		height          : 60%;
		position        : absolute;
		inset           : 0;
		margin          : auto;
		width           : 2px;
	}

	&::before {
		transform: rotate(45deg);
	}

	&::after {
		transform: rotate(-45deg);
	}

	&.btn-link {

		&::before,
		&::after {
			background-color: map-get($colors, 'primary');
		}
	}
}

.toggle:checked+.btn-toggle::after,
.toggle:checked+label .btn-toggle::after,
.btn-toggle.open::after {
	transform: rotate(-45deg) translate(-14%, 16%);
}

input[type="checkbox"],
input[type="radio"] {
	width         : 1rem;
	min-height    : 1rem;
	padding       : 0;
	margin        : 0 .6rem 0 .4rem;
	position      : relative;
	min-width     : 0;
	vertical-align: text-bottom;

	&:checked {
		border-color: map-get($colors, 'primary');

		&::after {
			content         : '';
			position        : absolute;
			inset           : 2px;
			background-color: map-get($colors, 'primary');
			border-radius   : 2px;
		}
	}

	+span {
		float  : left;
		display: block;
		width  : calc(100% - 40px);
	}
}

input[type="radio"] {

	&,
	&:checked::after {
		border-radius: 50%;
	}
}

select {
	background-image     : url("data:image/svg+xml;utf8,<svg fill='gray' xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><path d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");
	background-repeat    : no-repeat;
	background-position-x: 95%;
	background-position-y: 52%;
}

fieldset {
	display   : block;
	padding   : 0;
	position  : relative;
	height    : auto;
	transition: color .2s ease-in-out, border-color .2s ease-in-out;

	legend {
		display    : block;
		position   : relative;
		height     : 0;
		max-width  : 0;
		white-space: nowrap;
		transform  : translate(4px, 7px);
		user-select: none;
		transition : transform .2s ease-in-out, max-width .2s ease-in-out;
		margin-left: 5px;
		padding    : 0;

		@media screen and (min-width: map-get($breakpoints, 'md')) {
			transform: translate(4px, 8px);
		}

		label {
			display       : block;
			transform     : scale(1);
			transition    : all .2s ease-in-out;
			pointer-events: none;
			opacity       : .6;
		}
	}

	input,
	select,
	textarea {
		border        : 0;
		padding-left  : 10px;
		padding-bottom: 1px;
		display       : block;
		margin        : 0;
	}

	&.active legend,
	&:focus-within legend {
		transform: translateY(-11px);
		max-width: 300px;

		label {
			padding  : 0 .5rem;
			font-size: .9rem;
			opacity  : 1;
		}
	}

	&:focus-within {
		border-color: map-get($colors, 'primary');

		legend label {
			color: map-get($colors, 'primary');
		}
	}

	&.tiny,
	.tiny &,
	&.small,
	.small &,
	&.large,
	.large & {
		height    : auto;
		min-height: 0;
	}

	&.tiny,
	.tiny & {
		line-height: 1;
	}

	&.small,
	.small & {
		line-height: 1;
	}

	&.large,
	.large & {
		line-height: 1.8;
	}
}

textarea {
	min-height : 100px;
	padding    : .75rem;
	max-width  : 100%;
	line-height: 1.2;

	.small &,
	&.small,
	.tiny &,
	&.tiny {
		min-height : 60px;
		line-height: 1.2;
	}

	.large &,
	&.large {
		min-height : 200px;
		line-height: 1.2;
	}
}

@keyframes spinner {
	0% {
		transform: rotate(0deg)
	}

	90%,
	100% {
		transform: rotate(360deg)
	}
}

.loader {
	position: relative;

	&::after {
		content       : '';
		box-sizing    : border-box;
		position      : absolute;
		inset         : 0;
		margin        : auto;
		width         : 20px;
		height        : 20px;
		border-radius : 50%;
		border        : 2px solid transparent;
		border-color  : map-get($colors, 'primary') map-get($colors, 'primary') transparent transparent;
		opacity       : 0;
		pointer-events: none;
		transition    : opacity .3s ease-in-out .1s;
	}

	&.loading {
		pointer-events: none;
		user-select   : none;
		cursor        : default;
		color         : transparent;

		&::after {
			opacity  : 1;
			animation: spinner .8s ease infinite;
		}
	}

	.tiny &,
	&.tiny {
		&::after {
			width : 12px;
			height: 12px;
		}
	}

	.small &,
	&.small {
		&::after {
			width : 16px;
			height: 16px;
		}
	}

	.large &,
	&.large {
		&::after {
			width : 26px;
			height: 26px;
		}
	}
}

.btn.loader::after {
	border-color: white white transparent transparent;
}

table {
	width          : 100%;
	margin-top     : 1rem;
	border-collapse: collapse;

	td,
	th {
		padding   : .6rem .2rem;
		text-align: left;
	}

	thead th {
		font-weight: 500;
	}

	tbody tr {
		&:hover td {
			background-color: rgba(map-get($colors, 'primary'), .04);
		}

		td {
			border-top: 1px solid map-get($colors, 'light');
		}

		&:first-child td {
			border-color: darken(map-get($colors, 'light'), 10%);
		}
	}
}

hr {
	height          : 1px;
	border          : 0;
	background-color: map-get($colors, 'grey');
	margin          : map-get($gaps, 'default');
}

section {
	padding: (map-get($gaps, 'default') * 2) map-get($gaps, 'default');
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@if map-get($gaps, $breakpoint) {
		@media screen and (min-width: $breakpoint_width) {
			hr {
				margin: map-get($gaps, $breakpoint);
			}

			section {
				padding: (map-get($gaps, $breakpoint) * 2) map-get($gaps, $breakpoint);
			}
		}
	}
}

@each $color_name,
$color_value in $colors {
	section.bg-#{$color_name}+section.bg-#{$color_name} {
		padding-top: 0;
	}
}

.card {
	position        : relative;
	background-color: map-get($colors, 'white');
	overflow        : hidden;
	display         : flex;
	flex-direction  : column;

	>header,
	>footer {
		display    : flex;
		align-items: center;
	}

	>article {
		flex    : auto;
		overflow: auto;
	}
}