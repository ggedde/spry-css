/*
* Spry UI
*/
@use "variables"as *;

button,
[role=button],
[role=alert],
[role=tab],
input,
textarea,
select,
nav>a,
.toolbar,
nav li>a {
	position       : relative;
	appearance     : none;
	color          : inherit;
	background     : transparent;
	min-height     : 2.3em;
	min-width      : 2.3em;
	height         : auto;
	padding-inline : 1em;
	padding-block  : .3em;
	width          : 100%;
	display        : inline-flex;
	align-items    : center;
	text-decoration: none;
	outline        : none;
	vertical-align : middle;
	border         : 0;
	font-size      : 100%;
	margin         : 0;
}

button,
// .list li>a,
[role=button],
[role=tab],
input[type=submit] {
	width         : auto;
	cursor        : pointer;
	font-weight   : 400;
	text-align    : center;
	text-transform: uppercase;
}

:is(input, textarea, select):not([role=button]) {

	&:hover,
	&:focus {
		border-color: var(--color);
	}

	&:focus {
		box-shadow: inset 0 0 0 1px var(--color);
	}
}

:is(input, textarea, select, a, button) {
	outline: none;

	&:focus-visible:not(:hover) {
		outline       : 2px solid rgba(140, 140, 140, 0.25);
		outline-offset: 2px;
	}
}

[role=button]:has(:focus-visible),
[role=tab]:has(:focus-visible) {
	outline       : 2px solid rgba(140, 140, 140, 0.25);
	outline-offset: 2px;
}

[role=button].menu [type=checkbox] {
	outline: none;
}

:is([type=checkbox], [type=radio]):focus-visible:not(:hover) {
	outline-width: 4px;
}

button,
[role=button],
[role=alert],
[role=tab],
input,
textarea,
select,
article,
.list li>a,
.list li>button {
	border         : 1px solid;
	border-color   : rgba(var(--text-color-rgb), .5);
	border-radius  : 3px;
	justify-content: center;
	transition     : all .2s ease-in-out;
}

:is(input, textarea, select) {
	::placeholder {
		opacity: .7;
	}
}

[role=alert] {
	justify-content: flex-start;
	margin-bottom  : 1rem;
	padding        : .5em 1em;

	svg {
		min-width: 1em;
	}

	&:has(.close:checked) {
		transition      : all 10s cubic-bezier(0, 1, 0, 1), opacity .5s cubic-bezier(0, 1, 0, 1);
		transform       : scaleY(0);
		transform-origin: top center;
		max-height      : 0;
		min-height      : 0;
		opacity         : 0;
		padding-block   : 0;
		overflow        : hidden;
		pointer-events  : none;
		margin-block    : 0;
	}
}

:is(button, [role=button], [role=tab], input, textarea, select, form, .list li>a, .list li>button):disabled {
	opacity       : .6;
	pointer-events: none;
}

:is([type=checkbox], [type=radio]):not([role=button], .icon, i) {
	width         : 1em;
	min-height    : 1em;
	position      : relative;
	min-width     : 0;
	vertical-align: text-bottom;
	margin        : 0 .6em 0 .4em;
	padding       : 0;

	&:checked {
		border-color: var(--color);

		&::after {
			content         : '';
			position        : absolute;
			inset           : 2px;
			background-color: var(--color);
			border-radius   : 2px;
		}
	}
}

[type=radio]:not([role=button], .icon, i) {

	&,
	&:checked::after {
		border-radius: 50%;
	}
}

form.disabled :is(input, select, textarea, label, button) {
	pointer-events: none;
	opacity       : 0.8;
}

.toggle {
	cursor  : pointer;
	position: relative;

	input {
		appearance: none;
		border    : 0;
	}

	nav li>& {
		position : absolute;
		right    : .5em;
		top      : .25em;
		font-size: 80%;
	}
}

.toggle+*,
.toggle>[role=tooltip],
nav>ul>li>ul {
	max-height         : 1px;
	opacity            : 0;
	pointer-events     : none;
	// position        : relative;
	transform          : scaleY(.8) translateY(-4px);
	transform-origin   : top;
	transition         : transform .1s ease-in-out, opacity .05s ease-in-out, max-height .3s cubic-bezier(0, 1, 0, 1); // Out
	transition-delay   : .1s;
	z-index            : 1;
}

.toggle:has(:checked)+*,
.toggle:checked+*,
.toggle.hoverable:hover+*,
.toggle.hoverable:hover>[role=tooltip],
.toggle+.open,
.hoverable>ul>li:hover>ul,
nav li>ul:focus-within {
	max-height    : 100vh;
	opacity       : 1;
	pointer-events: all;
	transform     : scaleY(1.000001);
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {

		.toggle.#{$breakpoint}-hoverable:hover+*,
		.toggle+.#{$breakpoint}-open,
		.#{$breakpoint}-hoverable>ul>li:hover>ul {
			max-height    : 100vh;
			opacity       : 1;
			pointer-events: all;
			transform     : scaleY(1.000001);
		}
	}
}

:is(button, [role=button], [role=tab], [role=alert], input[type=submit]) {
	background-color: var(--color);
	border-color    : var(--color);
}

:is(button, [role=button], [role=tab], [role=alert], i:empty, .icon, input[type=submit]) {
	// --text-color: #{map-get($colors, 'light')};
	color: var(--text-color);

	&:is(.outline, .hazy, .link) {
		--text-color: var(--color);
		color       : var(--text-color);
	}

	&:is(.link, .hazy) {
		border-color: transparent;
	}

	&:is(.link, .outline) {
		background: none;
	}

	&.hazy {
		background-color: rgba(var(--color-rgb), .1);
	}

	&.outline {
		border-width: 1px;
		border-style: solid;
		border-color: var(--color);
	}

	svg {
		fill      : currentColor;
		transform : scale(1);
		transition: all .2s ease-in-out;
		display   : block;
	}
}

:is(i:empty, .icon:empty):is(.outline, .hazy) {
	width : 2em;
	height: 2em;
}

:is(button, [role=button], [role=tab], input[type=submit]) {

	&:is(.link, .outline) {

		&:hover:not(:active),
		&:focus:not(:active),
		&:focus-within:not(:active) {
			background-color: rgba(var(--color-rgb), 0.1);
		}
	}

	&.hazy {

		&:hover:not(:active),
		&:focus:not(:active),
		&:focus-within:not(:active) {
			background-color: rgba(var(--color-rgb), 0.2);
		}
	}
}

:is(button, [role=button], [role=tab], a:not([role=button]), input[type=submit]) {

	&:hover:not(:active),
	&:focus:not(:active),
	&:focus-within:not(:active) {
		filter: brightness(1.15);
	}
}

button svg,
[role=button] svg,
[role=tab] svg,
[role=alert] svg,
.list li>a svg,
i svg,
.icon svg {
	width : 1.25em;
	height: 1.25em;
}

:is(.list li>a, .list li>button) {
	background-color: transparent;

	&:focus,
	&:focus-within,
	&:hover {
		background-color: rgba(var(--color-rgb), 0.1);
	}
}

button.link,
[role=button].link,
[role=tab].link,
.list li>a,
.list li>button {
	text-transform: capitalize;
}

nav {
	ul {
		min-width: 200px;
	}

	li {
		position: relative;
		width   : 100%;
		display : block;
		border  : 0;
	}

	&.horizontal {
		position: relative;

		>ul {
			display  : flex;
			flex-wrap: wrap;
		}

		>a,
		>ul>li {

			display    : inline-flex;
			align-items: center;
			width      : auto;

			>.toggle {
				position      : relative;
				pointer-events: none;
				top           : auto;
				transform     : translateY(0);
			}

			>ul {
				position : absolute;
				top      : 100%;
				max-width: 300px;
			}
		}
	}

	@each $breakpoint,
	$breakpoint_width in $breakpoints {
		@media screen and (min-width: $breakpoint_width) {
			&.#{$breakpoint}-horizontal {
				position: relative;

				>ul {
					display  : flex;
					flex-wrap: wrap;
				}

				>a,
				>ul>li {

					display    : inline-flex;
					align-items: center;
					width      : auto;

					>.toggle {
						position      : relative;
						pointer-events: none;
						top           : auto;
						transform     : translateY(0);
					}

					>ul {
						position : absolute;
						top      : 100%;
						min-width: 220px;
						max-width: 300px;
					}
				}
			}
		}
	}

	&.list {

		&,
		>a,
		>button,
		li>a,
		li>button {
			width          : 100%;
			text-align     : left;
			justify-content: flex-start;
			border         : 0;
		}
	}
}

:is(button, [role=button], [role=tab]) {
	position: relative;

	input:not([role=button], .icon, i) {
		padding   : 0;
		margin    : 0;
		width     : 0;
		height    : 0;
		min-height: 0;
		z-index   : -1;
	}
}

:is([role=button], [role=tab]):has(input) svg:nth-of-type(2) {
	opacity  : 0;
	transform: scale(.5);
}

:is([role=button], [role=tab]):has(:checked) svg:nth-of-type(1) {
	opacity  : 0;
	transform: scale(.5);
}

:is([role=button], [role=tab]):has(:checked) svg:nth-of-type(2) {
	opacity  : 1;
	transform: scale(1);
}

i:has(svg) {
	position: relative;
}

.icon,
i:empty,
i:has(svg) {
	transition: rotate .15s ease-in-out;
	padding   : 0;
	display   : inline-flex;
	width     : 1em;
	height    : 1em;
}

.icon svg,
i svg {
	position: absolute;
	margin  : auto;
	inset   : 0;
	fill    : currentColor;
	width   : 1em;
	height  : 1em;
}

:is(.icon, i:empty) {

	input:not([role=button]) {
		border        : 0;
		pointer-events: none;
		opacity       : 0;
		height        : 0;
		height        : 0;
		margin-left   : 0;
		margin-right  : 0;
		padding       : 0;
	}

	&:is(.up, .down, .left, .right, .close, .search, .menu, .dots)::after {
		border       : .15em solid var(--text-color);
		border-left  : 0;
		border-bottom: 0;
		width        : .7em;
		height       : .7em;
		transform    : rotate(135deg) translate(-.1em, .1em);
	}

	&::before,
	&::after {
		content   : '';
		position  : absolute;
		margin    : auto;
		inset     : 0;
		display   : block;
		transition: all .25s cubic-bezier(.25, .8, .25, 1);
	}

	&.text-right::before {
		order: -2;
	}

	&.text-right::after {
		order: -1;
	}

	&.up::after {
		transform: rotate(315deg) translate(-.1em, .1em);
	}

	&.right::after {
		transform: rotate(45deg) translate(-.1em, .1em);
	}

	&.left::after {
		transform: rotate(225deg) translate(-.1em, .1em);
	}

	&.question::after {
		content: '?';
	}

	&.info::after {
		content: '!';
	}

	&.question::after,
	&.info::after {
		font-style     : normal;
		display        : flex;
		align-items    : center;
		justify-content: center;
		font-size      : 130%;
	}

	&:is(.menu, .dots, .close, .search) {

		&::before,
		&::after {
			content         : '';
			background-color: var(--text-color);
			height          : 1.2em;
			margin          : auto;
			width           : .12em;
			box-shadow      : none;

		}

		&::before {
			transform: rotate(45deg);
			order    : 1;
		}

		&::after {
			transform: rotate(-45deg);
		}
	}

	&.search:not(:checked, :has(:checked)) {
		&::before {
			background-color: transparent;
			border          : .15em solid var(--text-color);
			border-radius   : 50%;
			height          : 0.75em;
			width           : 0.75em;
			transform       : translate(-.1em, -.1em);
		}

		&::after {
			background-color: var(--text-color);
			border-radius   : 3px;
			height          : 0.15em;
			width           : 0.5em;
			transform       : translate(.3em, .3em) rotate(45deg);
		}
	}


	&.menu:not(:checked, :has(:checked)),
	&.dots:not(:checked, :has(:checked)) {

		&::before,
		&::after {
			background-color: var(--text-color);
			transform       : translate(0, -.4em) rotate(90deg);
			height          : 1.4em;
			width           : .12em;
		}

		&::after {
			transform : translate(0, .4em) rotate(-90deg);
			box-shadow: .4em 0 0 var(--text-color);
		}

		&:focus {
			box-shadow: none;
		}
	}

	&.dots:not(:checked, :has(:checked)) {

		&::before,
		&::after {
			height       : .2em;
			width        : .2em;
			border-radius: 50%;
		}
	}

	&:has(:checked)::after,
	&.icon:checked::after {
		rotate: 180deg;
	}
}

.icon,
i:empty {
	position: relative;
}

:is(button, [role=button], [role=tab]) :is(.icon, i:empty) {
	border-color: transparent;
	min-height  : 0;
	min-width   : 0;
}

select {
	background-image   : url("data:image/svg+xml;utf8,<svg fill='gray' xmlns='http://www.w3.org/2000/svg' viewBox='-20 -6 40 36'><path d='M7.41 8.58 12 13.17l4.59-4.59L18 10l-6 6-6-6 1.41-1.42z'/></svg>");
	background-repeat  : no-repeat;
	background-position: 95%;
	padding-right      : 1.7em;
	line-height        : 1.55;

	option {
		background: #eee;
		color     : #333;
	}
}

textarea {
	min-height : 8em;
	max-height : 500px;
	padding    : .75rem;
	max-width  : 100%;
	min-width  : 100%;
	line-height: 1.2;
}

@keyframes labelOut {

	0%,
	100% {
		opacity: .7,
	}

	50% {
		opacity: 0;
	}
}

label {
	position: relative;
	display : block;

	sup,
	sub {
		position        : absolute;
		transform       : translate(10px, -50%);
		top             : 50%;
		transition      : all .2s ease-in-out;
		transform-origin: left;
		opacity         : 0.7;
	}

	&:has(textarea) {

		sup,
		sub {
			top: 19px;
		}
	}

	&:focus-within,
	&.active {

		:is(sup, sub) {
			transform  : translate(3px, -50%) scale(0.85);
			top        : -12px;
			opacity    : .8;
			font-weight: 500;
		}

		sub {
			top: calc(100% + 11px);
		}
	}

	&:focus-within :is(sup, sub) {
		color: var(--color);
	}

	&:focus-within:not(.active) :is(sup, sub) {
		animation: labelOut .2s ease-in-out;
	}

	&:has(sup) {
		margin-top: 1rem;
	}

	&:has(sub) {
		margin-bottom: 1rem;
	}
}

@keyframes spinner {
	0% {
		transform: rotate(0deg)
	}

	90%,
	100% {
		transform: rotate(360deg)
	}
}

[aria-busy] {
	position: relative;

	&::after {
		content       : '';
		box-sizing    : border-box;
		position      : absolute;
		inset         : 0;
		margin        : auto;
		width         : 1.3em;
		height        : 1.3em;
		border-radius : 50%;
		border        : .15em solid transparent;
		border-color  : var(--text-color) var(--text-color) transparent transparent;
		opacity       : 0;
		pointer-events: none;
		transition    : opacity .3s ease-in-out .1s;
	}
}

[aria-busy=true],
:is(button, [role=button], [role=tab], input[type=submit])[aria-busy=true] {
	pointer-events: none;
	user-select   : none;
	cursor        : default;
	color         : transparent;

	&::after {
		opacity  : 1;
		animation: spinner .8s ease infinite;
	}
}

article {
	background-color: map-get($colors, 'white');
	border-color    : var(--color);
	display         : flex;
	flex-direction  : column;
	align-items     : flex-start;
	justify-content : flex-start;
	gap             : 2em;
	overflow        : hidden;
	padding         : 2em;
	position        : relative;

	&:has(>header),
	&:has(>footer) {
		padding: 0;

		>header,
		>footer,
		>p,
		>div {
			padding-left : 2rem;
			padding-right: 2rem;
		}
	}

	>header,
	>footer {
		background-color: var(--color);
		color           : var(--color-text);
		display         : flex;
		align-items     : center;
		padding-top     : 1em;
		padding-bottom  : 1em;
	}

	>footer {
		margin-top: auto;
	}

	>header,
	>footer,
	>div,
	>p,
	>h1,
	>h2,
	>h3,
	>h4,
	>h5,
	>h6 {
		width: 100%;
	}
}

table {
	width          : 100%;
	margin-top     : 1rem;
	border-collapse: collapse;

	td,
	th {
		padding   : .6rem .2rem;
		text-align: left;
	}

	thead th {
		font-weight: 500;
	}

	tbody tr {
		&:hover td {
			background-color: rgba(var(--color-rgb), .04);
		}

		td {
			border-top: 1px solid map-get($colors, 'light');
		}

		&:first-child td {
			border-color: darken(map-get($colors, 'light'), 10%);
		}
	}
}

hr {
	height          : 1px;
	border          : 0;
	background-color: map-get($colors, 'default');
	margin          : var(--gap);
}

section {
	padding: (calc(var(--gap) * 2)) var(--gap);
}

[role=tooltip] {
	width           : 100vw;
	max-width       : 300px;
	position        : absolute;
	cursor          : auto;
	border-radius   : 5px;
	background-color: var(--light);
	padding         : 1em;
	z-index         : 2;
}

:has(>[role=tooltip]) {
	position: relative;

	&:hover {
		z-index: 2;
	}

	[role=tooltip] {
		width     : 90vw;
		position  : absolute;
		transition: opacity .2s ease-in-out;
		cursor    : auto;
	}

	&:not(:hover) [role=tooltip] {
		opacity       : 0;
		pointer-events: none;
	}
}