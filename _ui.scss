/*! 
* Spry UI
*/
button,
[role=button],
input,
textarea,
select,
.alert,
nav>a,
.toolbar,
nav li>a {
	position       : relative;
	appearance     : none;
	color          : inherit;
	background     : transparent;
	min-height     : 2.3em;
	min-width      : 2.3em;
	height         : auto;
	padding-right  : 1em;
	padding-left   : 1em;
	width          : 100%;
	display        : inline-flex;
	align-items    : center;
	text-decoration: none;
	outline        : none;
	vertical-align : middle;
	border         : 0;
	font-size      : 100%;
}

button,
[role=button] {
	width: auto;
}

:is(input, textarea, select) {

	&:hover,
	&:focus {
		border-color: var(--spry-accent-color);
	}

	&:focus {
		box-shadow: inset 0 0 0 1px var(--spry-accent-color);
	}
}

:is(input, textarea, select, a, button) {
	outline: none;

	&:focus-visible:not(:hover) {
		outline       : 2px solid rgba(140, 140, 140, 0.25);
		outline-offset: 2px;
	}
}

[role=button]:has(:focus-visible) {
	outline       : 2px solid rgba(140, 140, 140, 0.25);
	outline-offset: 2px;
}

[role=button].menu input[type="checkbox"] {
	outline: none;
}

:is(input[type="checkbox"], input[type="radio"]):focus-visible:not(:hover) {
	outline-width: 4px;
}

button,
[role=button],
input,
textarea,
select,
.alert,
article,
.list li>a,
.list li>button {
	border         : 1px solid map-get($colors, 'medium');
	border-radius  : 3px;
	justify-content: center;
}

a:not([role=button]),
button,
[role=button],
input,
textarea,
select,
.alert,
.list li>a,
.list li>button {
	transition: color .2s ease-in-out, background-color .2s ease-in-out, border-color .2s ease-in-out, filter .2s ease-in-out;
}

:is(button, [role=button], input, textarea, select, .list li>a, .list li>button) {
	::placeholder {
		color: #999;
	}

	&:disabled {
		opacity: .6;
		cursor : not-allowed;
	}
}

.alert {
	justify-content: flex-start;
	margin-bottom  : 1rem;
	padding        : .5em 1em;

	svg {
		min-width: 1em;
	}

}

:is(a, button, [role=button], input, textarea, select, form):disabled {
	opacity       : .6;
	pointer-events: none;
}

:is(input[type=checkbox], input[type=radio]) {
	width         : 1rem;
	min-height    : 1rem;
	position      : relative;
	min-width     : 0;
	vertical-align: text-bottom;
	margin        : 0 .6rem 0 .4rem;

	// &:not([class*=icon-]) {
	// 	padding       : 0;
	// }

	&:checked {
		border-color: var(--spry-accent-color);

		&::after {
			content         : '';
			position        : absolute;
			inset           : 2px;
			background-color: var(--spry-accent-color);
			border-radius   : 2px;
		}
	}
}

input[type="radio"] {

	&,
	&:checked::after {
		border-radius: 50%;
	}
}

form.disabled,
form:disabled {

	:is(input, select, textarea, label, button) {
		pointer-events: none;
		opacity       : 0.8;
	}
}

.toggle {
	cursor: pointer;

	input[type="checkbox"] {
		appearance: none;
		border    : 0;
	}
}

.toggle+*,
nav>ul>li>ul {
	max-height      : 1px;
	opacity         : 0;
	pointer-events  : none;
	position        : relative;
	transform       : scaleY(.8) translateY(-4px);
	transform-origin: top;
	transition      : transform .1s ease-in-out, opacity .05s ease-in-out, max-height .3s cubic-bezier(0, 1, 0, 1); // Out
	transition-delay: .1s;
	z-index         : 1;
}

.toggle:has(:checked)+*,
.toggle.hoverable:hover+*,
.toggle+.open,
.hoverable>ul>li:hover>ul,
nav li>ul:focus-within {
	max-height    : 100vh;
	opacity       : 1;
	pointer-events: all;
	transform     : scaleY(1.000001);
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {

		.toggle.#{$breakpoint}-hoverable:hover+*,
		.toggle+.#{$breakpoint}-open,
		.#{$breakpoint}-hoverable>ul>li:hover>ul {
			max-height    : 100vh;
			opacity       : 1;
			pointer-events: all;
			transform     : scaleY(1.000001);
		}
	}
}

:is(button, [role=button], input[type="submit"]) {
	cursor           : pointer;
	background-color : var(--spry-accent-color);
	border-color     : var(--spry-accent-color);
	--spry-text-color: #{map-get($colors, 'light')};
	color            : var(--spry-text-color);

	&.outline,
	&.hazy,
	&.link {
		color: var(--spry-accent-color);
	}

	&.link,
	&.hazy {
		border-color: transparent;
	}

	&.link,
	&.outline {
		background: none;

		&:hover:not(:active),
		&:focus:not(:active),
		&:focus-within:not(:active) {
			background-color: rgba(var(--spry-accent-color-rgb), 0.1);
		}
	}

	&.hazy {
		background-color: rgba(var(--spry-accent-color-rgb), .1);

		&:hover:not(:active),
		&:focus:not(:active),
		&:focus-within:not(:active) {
			background-color: rgba(var(--spry-accent-color-rgb), 0.2);
		}
	}

	&.outline {
		border-width: 1px;
		border-style: solid;
		border-color: var(--spry-accent-color);
	}
}

:is(button, [role=button], a:not([role=button]), input[type="submit"]) {

	&:hover:not(:active),
	&:focus:not(:active),
	&:focus-within:not(:active) {
		filter: brightness(1.15);
	}
}

button,
.list li>a,
[role=button],
input[type="submit"] {
	text-align    : center;
	text-transform: uppercase;
	width         : auto;
}


button svg,
[role=button] svg,
.list li>a svg {
	width : 1.5em;
	height: 1.5em;
}

:is(.list li>a, .list li>button) {
	background-color: transparent;

	&:focus,
	&:focus-within,
	&:hover {
		background-color: rgba(var(--spry-accent-color-rgb), 0.1);
	}
}

button.link,
[role=button].link,
.list li>a,
.list li>button {
	text-transform: capitalize;
}

nav {
	ul {
		min-width: 200px;
	}

	li {
		position: relative;
		width   : 100%;
		display : block;
		border  : 0;
	}

	&.horizontal {
		position: relative;

		>ul {
			display  : flex;
			flex-wrap: wrap;
		}

		>a,
		>ul>li {

			display    : inline-flex;
			align-items: center;
			width      : auto;

			>.toggle {
				position      : relative;
				pointer-events: none;
				top           : auto;
				transform     : translateY(0);
			}

			>ul {
				position : absolute;
				top      : 100%;
				max-width: 300px;
			}
		}
	}

	@each $breakpoint,
	$breakpoint_width in $breakpoints {
		@media screen and (min-width: $breakpoint_width) {
			&.#{$breakpoint}-horizontal {
				position: relative;

				>ul {
					display  : flex;
					flex-wrap: wrap;
				}

				>a,
				>ul>li {

					display    : inline-flex;
					align-items: center;
					width      : auto;

					>.toggle {
						position      : relative;
						pointer-events: none;
						top           : auto;
						transform     : translateY(0);
					}

					>ul {
						position : absolute;
						top      : 100%;
						min-width: 220px;
						max-width: 300px;
					}
				}
			}
		}
	}

	&.list {

		&,
		>a,
		>button,
		li>a,
		li>button {
			width          : 100%;
			text-align     : left;
			justify-content: flex-start;
		}

		>a,
		>button,
		li>a,
		li>button {
			padding-top   : 0.5rem;
			padding-bottom: 0.5rem;
			border        : 0;
		}
	}

	li>a,
	li>button,
	.list li>button,
	.list li>a {
		line-height: 1.2;

		&.truncate {
			display: block;
		}
	}

	li.sm>a,
	li.xs>a {
		padding-right: 2rem;
	}
}

button,[role=button] {
	position: relative;
	svg {
		fill: currentColor;
		position: absolute;
		inset: 0;
		margin: auto;
		transform: scale(1);
		transition: all .2s ease-in-out;
		display: block;
	}
	[type=checkbox] {
		padding: 0;
		margin: 0;
		z-index: -1;
	}
}

button svg:nth-of-type(2),
[role=button] svg:nth-of-type(2) {
	opacity: 0;
	transform: scale(.5);
}

button:has(:checked) svg:nth-of-type(1),
[role=button]:has(:checked) svg:nth-of-type(1) {
	opacity: 0;
	transform: scale(.5);
}

button:has(:checked) svg:nth-of-type(2),
[role=button]:has(:checked) svg:nth-of-type(2) {
	opacity: 1;
	transform: scale(1);
}

[class*="icon-"] {

	transition: rotate .15s ease-in-out;
	padding: 0;

	input {
		border        : 0;
		pointer-events: none;
		opacity       : 0;
		width         : 0;
		height        : 0;
		margin-left   : 0;
		margin-right  : 0;
		padding: 0;
	}

	&::after {
		content      : '';
		display      : block;
		position     : relative;
		inset        : 0;
		margin       : auto;
		border       : 2px solid var(--spry-text-color);
		border-left  : 0;
		border-bottom: 0;
		width        : .7em;
		height       : .7em;
		transition   : rotate .2s ease-in-out;
		transform    : rotate(135deg) translate(-14%, 16%);
	}

	&.link,
	&.hazy,
	&.outline {
		&::after {
			border-color: var(--spry-accent-color);
		}
	}

	nav li>& {
		position : absolute;
		right    : .5em;
		top      : .25em;
		font-size: 80%;
	}

	// &:not(:empty):not(.text-right):after {
	// 	margin-left: 1em;
	// }

	&.text-right::before {
		order: -2;
	}

	&.text-right::after {
		order: -1;
	}

	// &.text-right:not(:empty):after {
	// 	margin-right: 1em;
	// }
}

.icon-up::after {
	transform: rotate(315deg) translate(-14%, 16%);
}

.icon-right::after {
	transform: rotate(45deg) translate(-14%, 16%);
}

.icon-left::after {
	transform: rotate(225deg) translate(-14%, 16%);
}

.icon-menu,
.icon-close,
.icon-search {

	&::before,
	&::after {
		content         : '';
		background-color: var(--spry-text-color);
		height          : 1.2em;
		margin          : auto;
		width           : 2px;
		box-shadow      : none;

	}

	&::before {
		transform: rotate(45deg) translate(-0.1em, 0.1em);
		order    : 1;
	}

	&::after {
		transform: rotate(-45deg);
	}

	&.link,
	&.hazy,
	&.outline {

		&::before,
		&::after {
			background-color: var(--spry-accent-color);
		}
	}

	&:empty {
		&::before {
			transform: rotate(45deg) translate(-.4em, .4em);
		}

		&::after {
			transform: rotate(-45deg) translate(.4em, .4em);
		}
	}
}

.icon-search {
	&::before {
		background-color: transparent;
		border          : 2px solid var(--spry-text-color);
		border-radius   : 50%;
		height          : 0.85em;
		width           : 0.85em;
		transform       : translate(-49%, -16%);
	}

	&::after {
		background-color: var(--spry-text-color);
		border-radius   : 3px;
		height          : 0.15em;
		width           : 0.6em;
		transform       : translate(122%, 210%) rotate(45deg);
	}

	&.link,
	&.hazy,
	&.outline {

		&::before {
			background-color: transparent;
			border-color    : var(--spry-accent-color);
		}
	}

	&:empty {
		&::before {
			transform: translate(-79%, -16%);
		}

		&::after {
			transform: translate(142%, 210%) rotate(45deg);
		}
	}
}


.icon-menu:not(:checked) {

	&::before,
	&::after {
		background-color: var(--spry-text-color);
		transform       : translate(.5em, -.4em) rotate(90deg);
		height          : 1.5em;
		;
	}

	&::after {
		transform : translate(.5em, .4em) rotate(-90deg);
		box-shadow: 4px 0 0 red;
	}

	&:focus {
		box-shadow: none;
	}
}

[role=button]:has([class*="icon-"]:checked) [class*="icon-"] {
	rotate: 180deg;
}

select {
	background-image     : url("data:image/svg+xml;utf8,<svg fill='gray' xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><path d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");
	background-repeat    : no-repeat;
	background-position-x: 95%;
	background-position-y: 52%;
	line-height          : 2.1em;
	padding-right        : 1.7em;

	option {
		background: #eee;
		color     : #333;
	}

	@media (prefers-color-scheme: dark) {
		option {
			background: #333;
			color     : #eee;
		}
	}
}

textarea {
	min-height : 8em;
	max-height : 500px;
	padding    : .75rem;
	max-width  : 100%;
	min-width  : 100%;
	line-height: 1.2;
}

label {
	position: relative;
	display : block;

	sup,
	sub {
		position        : absolute;
		transform       : translate(10px, -50%);
		top             : 50%;
		transition      : all .2s ease-in-out;
		transform-origin: left;
		animation       : none;
		opacity         : 0.7;
	}

	&:has(textarea) {

		sup,
		sub {
			top: 19px;
		}
	}

	&:focus-within,
	&.active {

		sup,
		sub {
			transform  : translate(3px, -50%) scale(0.85);
			top        : -12px;
			opacity    : .8;
			font-weight: 500;
		}

		sub {
			top: calc(100% + 11px);
		}
	}

	&:focus-within sup,
	&:focus-within sub {
		color    : var(--spry-accent-color);
		animation: all .2s forwards ease;
	}

	&:has(sup) {
		margin-top: 1rem;
	}

	&:has(sub) {
		margin-bottom: 1rem;
	}
}

@keyframes labll {
	0% {
		opacity: 1,
	}

	50% {
		opacity: .4;
	}

	100% {
		opacity: .8;
	}
}

@keyframes spinner {
	0% {
		transform: rotate(0deg)
	}

	90%,
	100% {
		transform: rotate(360deg)
	}
}

[aria-busy] {
	position: relative;

	&::after {
		content       : '';
		box-sizing    : border-box;
		position      : absolute;
		inset         : 0;
		margin        : auto;
		width         : 1.3em;
		height        : 1.3em;
		border-radius : 50%;
		border        : 2px solid transparent;
		border-color  : var(--spry-text-color) var(--spry-text-color) transparent transparent;
		opacity       : 0;
		pointer-events: none;
		transition    : opacity .3s ease-in-out .1s;
	}
}

[aria-busy=true],
:is(button, [role=button], input[type=submit])[aria-busy=true] {
	pointer-events: none;
	user-select   : none;
	cursor        : default;
	color         : transparent;

	&::after {
		opacity  : 1;
		animation: spinner .8s ease infinite;
	}
}

article {
	background-color: map-get($colors, 'white');
	border-color    : var(--spry-accent-color);
	display         : flex;
	flex-direction  : column;
	align-items     : flex-start;
	justify-content : flex-start;
	gap             : 2em;
	overflow        : hidden;
	padding         : 2em;
	position        : relative;

	&:has(>header),
	&:has(>footer) {
		padding: 0;

		>header,
		>footer,
		>p,
		>div {
			padding-left : 2rem;
			padding-right: 2rem;
		}
	}

	>header,
	>footer {
		background-color: var(--spry-accent-color);
		color           : var(--spry-accent-color-text);
		display         : flex;
		align-items     : center;
		padding-top     : 1em;
		padding-bottom  : 1em;
	}

	>footer {
		margin-top: auto;
	}

	>header,
	>footer,
	>div,
	>p,
	>h1,
	>h2,
	>h3,
	>h4,
	>h5,
	>h6 {
		width: 100%;
	}
}

table {
	width          : 100%;
	margin-top     : 1rem;
	border-collapse: collapse;

	td,
	th {
		padding   : .6rem .2rem;
		text-align: left;
	}

	thead th {
		font-weight: 500;
	}

	tbody tr {
		&:hover td {
			background-color: rgba(var(--spry-accent-color-rgb), .04);
		}

		td {
			border-top: 1px solid map-get($colors, 'light');
		}

		&:first-child td {
			border-color: darken(map-get($colors, 'light'), 10%);
		}
	}
}

hr {
	height          : 1px;
	border          : 0;
	background-color: map-get($colors, 'medium');
	margin          : map-get($gaps, 'default');
}

section {
	padding: (map-get($gaps, 'default') * 2) map-get($gaps, 'default');
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@if map-get($gaps, $breakpoint) {
		@media screen and (min-width: $breakpoint_width) {
			hr {
				margin: map-get($gaps, $breakpoint);
			}

			section {
				padding: (map-get($gaps, $breakpoint) * 2) map-get($gaps, $breakpoint);
			}
		}
	}
}

@each $color_name,
$color_value in $colors {
	section.bg-#{$color_name}+section.bg-#{$color_name} {
		padding-top: 0;
	}
}

:has(>.tooltip) {
	position: relative;

	&:hover {
		z-index: 2;
	}

	.tooltip {
		width     : 90vw;
		position  : absolute;
		transition: opacity .2s ease-in-out;
		cursor    : auto;
	}

	&:not(:hover) .tooltip {
		opacity       : 0;
		pointer-events: none;
	}
}