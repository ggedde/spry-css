/*!
* Spry Colors
*/

@use "variables"as *;

// Update Prefered Theme Dark Colors
@media (prefers-color-scheme: dark) {
	select option {
		background: var(--dark);
		color     : var(--light);
	}
}

// Update Dark Theme Colors
[data-theme=dark],
[data-theme=dark] article {
	background-color: darken(map-get(map-get($colors, 'dark'), 'light'), 8%);
}

[data-theme=dark] {

	select option,
	.tooltip {
		background-color: var(--dark);
		color           : var(--light);
	}

	@each $color_name, $color_value in $colors {
		@if map-get($color_value, 'dark') {
			--#{$color_name}    : #{map-get($color_value, 'dark')};
			--#{$color_name}-rgb: #{red(map-get($color_value, 'dark')), green(map-get($color_value, 'dark')), blue(map-get($color_value, 'dark'))};


			@if index($colors, ($color_name $color_value)) == 1 {
				--color      : #{map-get($color_value, 'dark')};
				--color-rgb  : #{red(map-get($color_value, 'dark')), green(map-get($color_value, 'dark')), blue(map-get($color_value, 'dark'))};
				@if (lightness(map-get($color_value, 'dark')) > 70) {
					--text-color: var(--dark);
					--text-color-rgb: var(--dark-rgb);
				}
	
				@else {
					--text-color: var(--light);
					--text-color-rgb: var(--light-rgb);
				}
			}

			.#{$color_name} {
				@if (lightness(map-get($color_value, 'dark')) > 70) {
					--text-color: var(--dark);
					--text-color-rgb: var(--dark-rgb);
				}
	
				@else {
					--text-color: var(--light);
					--text-color-rgb: var(--light-rgb);
				}
			}
		}
	}
	color: var(--text-color);
}

body,
[data-theme=light],
[data-theme=light] article {
	background-color: white;
}

body,
[data-theme=light] {
	color: var(--text-color);

	select option,
	.tooltip {
		background-color: var(--light);
		color           : var(--dark);
	}

	@each $color_name, $color_value in $colors {
		--#{$color_name}    : #{map-get($color_value, 'light')};
		--#{$color_name}-rgb: #{red(map-get($color_value, 'light')), green(map-get($color_value, 'light')), blue(map-get($color_value, 'light'))};
	}

	@each $color_name, $color_value in $colors {

		@if index($colors, ($color_name $color_value)) == 1 {
			--color      : #{map-get($color_value, 'light')};
			--color-rgb  : #{red(map-get($color_value, 'light')), green(map-get($color_value, 'light')), blue(map-get($color_value, 'light'))};
			@if (lightness(map-get($color_value, 'light')) > 70) {
				--text-color: var(--dark);
				--text-color-rgb: var(--dark-rgb);
			}

			@else {
				--text-color: var(--light);
				--text-color-rgb: var(--light-rgb);
			}
		}
	}
}

body,
[data-theme=light] {

	@each $color_name,
	$color_value in $colors {

		@if map-get($color_value, 'light') {
			.#{$color_name} {
				@if (lightness(map-get($color_value, 'light')) > 70) {
					--text-color: var(--dark);
					--text-color-rgb: var(--dark-rgb);
				}
	
				@else {
					--text-color: var(--light);
					--text-color-rgb: var(--light-rgb);
				}
			}
		}
	}
}

// Initial Color sets
@each $color_name,
$color_value in $colors {

	article.#{$color_name} {
		--card-color: var(--#{$color_name});
	}

	.#{$color_name} :is(.link, .outline, .hazy) {
		--text-color : var(--#{$color_name});
		--text-color-rgb : var(--#{$color_name}-rgb);
		color        : var(--text-color);
	}
}


// First Color Overrides
@each $color_name,
$color_value in $colors {

	.link-#{$color_name} a:not(.button),
	.#{$color_name}:is(.link, .outline, .hazy),
	.link-hover-#{$color_name} a:not(.button):is(:hover, :focus) {
		--text-color : var(--#{$color_name});
		--text-color-rgb : var(--#{$color_name}-rgb);
		color        : var(--text-color);
	}
}

// Final Color Overrides
@each $color_name,
$color_value in $colors {

	[class].#{$color_name} {
		--color     : var(--#{$color_name});
		--color-rgb : var(--#{$color_name}-rgb);
	}

	[class].color-#{$color_name},
	.hover-#{$color_name}:is(:hover, :focus),
	.icon.#{$color_name}:not(button, .button) {
		--text-color : var(--#{$color_name});
		--text-color-rgb : var(--#{$color_name}-rgb);
		color        : var(--text-color);
	}

	.bg-#{$color_name},
	.tooltip.bg-#{$color_name} {
		background-color: var(--#{$color_name});
	}

	.bg-#{$color_name}-hazy {
		background-color: rgba(var(--#{$color_name}-rgb), .1);
	}

	.border-#{$color_name} {
		border-color: var(--#{$color_name});
	}

	.border-#{$color_name}-hazy {
		border-color: rgba(var(--#{$color_name}-rgb), .4);
	}
}