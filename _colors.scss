/*!
* Spry Colors
*/

@use "variables"as *;

// Update Prefered Theme Dark Colors
@media (prefers-color-scheme: dark) {
	select option {
		background: var(--dark);
		color     : var(--light);
	}
}

// Update Dark Theme Colors
[data-theme=dark],
[data-theme=dark] article {
	background-color: darken(map-get(map-get($colors, 'dark'), 'dark'), 8%);
	color           : var(--contrast);
}
[data-theme=dark] {
	select option,
	.tooltip {
		background-color: var(--dark);
		color           : var(--light);
	}

	@each $color_name, $color_value in $colors {
		@if map-get($color_value, 'dark') {
			--#{$color_name}    : #{map-get($color_value, 'dark')};
			--#{$color_name}-rgb: #{red(map-get($color_value, 'dark')), green(map-get($color_value, 'dark')), blue(map-get($color_value, 'dark'))};

			@if $color_name==default {
				--color          : #{map-get($color_value, 'dark')};
				--color-rgb      : #{red(map-get($color_value, 'dark')), green(map-get($color_value, 'dark')), blue(map-get($color_value, 'dark'))};
				--text-color     : #{map-get($color_value, 'dark')};
				--text-color-rgb : #{red(map-get($color_value, 'dark')), green(map-get($color_value, 'dark')), blue(map-get($color_value, 'dark'))};
			}
		}
    }
}

body,
[data-theme=light],
[data-theme=light] article {
	background-color: white;
}

body,
[data-theme=light] {
	--text-color    : var(--dark);
	--text-color-rgb: var(--dark-rgb);

	select option,
	.tooltip {
		background-color: var(--light);
		color           : var(--dark);
	}

	@each $color_name, $color_value in $colors {
        --#{$color_name}    : #{map-get($color_value, 'light')};
        --#{$color_name}-rgb: #{red(map-get($color_value, 'light')), green(map-get($color_value, 'light')), blue(map-get($color_value, 'light'))};

        @if $color_name==default {
            --color          : #{map-get($color_value, 'light')};
            --color-rgb      : #{red(map-get($color_value, 'light')), green(map-get($color_value, 'light')), blue(map-get($color_value, 'light'))};
            --text-color     : #{map-get($color_value, 'light')};
            --text-color-rgb : #{red(map-get($color_value, 'light')), green(map-get($color_value, 'light')), blue(map-get($color_value, 'light'))};
        }
    }
}

@each $color_name, $color_value in $colors {

	article.#{$color_name} {
		--card-color: var(--#{$color_name});
	}

	[class].#{$color_name} {
		--color     : var(--#{$color_name});
		--color-rgb : var(--#{$color_name}-rgb);
	}

	.link-#{$color_name} a:not(.button),
	.hover-#{$color_name}:is(:hover,:focus),
	.link-hover-#{$color_name} a:not(.button):is(:hover,:focus),
	.icon.#{$color_name}:not(button,.button),
	[class].color-#{$color_name} {
		--text-color     : var(--#{$color_name});
		--text-color-rgb : var(--#{$color_name}-rgb);
		color            : var(--text-color);
	}

	.bg-#{$color_name},
	.tooltip.bg-#{$color_name} {
		background-color: var(--#{$color_name});
	}
	.bg-#{$color_name}-hazy {
		background-color: rgba(var(--#{$color_name}-rgb), .1);
	}

	.border-#{$color_name} {
		border-color: var(--#{$color_name});
	}
	.border-#{$color_name}-hazy {
		border-color: rgba(var(--#{$color_name}-rgb), .4);
	}
}