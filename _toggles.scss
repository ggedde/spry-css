/*!
* Spry Toggles
*/
@use "variables"as *;

.toggle {
	cursor  : pointer;
	position: relative;
}

li>.toggle:not(:first-child),
li>label:has(.toggle):not(:first-child) {
	position : absolute;
	right    : .5em;
	top      : .25em;
	font-size: 80%;
}

input.toggle:not(.button),
.toggle input:not(.button) {
    border: 0;
	outline: 0;
	min-width: 0;
    min-height: 0;
}

input.toggle:not(.button,.icon),
.toggle input:not(.button,.icon) {
	height: 0;
	width: 0;
	padding: 0;
    margin: 0;
}

.hoverable > ul > li ul,
.hoverable > li ul,
.toggle + *,
.closed {
	max-height      : 1px;
	min-height      : 0;
	opacity         : 0;
	padding-block   : 0;
	pointer-events  : none;
	pointer-events  : none;
	transform       : scaleY(.8) translateY(-4px) translateZ(0);
	transform-origin: top;
	transition      : transform .1s ease-in-out, opacity .1s ease-in-out, max-height .5s cubic-bezier(0, 1, 0, 1), padding-block .5s cubic-bezier(0, 1, 0, 1); // Out
	transition-delay: .1s;
	z-index         : 2;
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {

		.#{$breakpoint}-hoverable > ul > li ul,
		.#{$breakpoint}-hoverable > li ul {
			max-height      : 1px;
			min-height      : 0;
			opacity         : 0;
			padding-block   : 0;
			pointer-events  : none;
			pointer-events  : none;
			transform       : scaleY(.8) translateY(-4px) translateZ(0);
			transform-origin: top;
			transition      : transform .1s ease-in-out, opacity .1s ease-in-out, max-height .5s cubic-bezier(0, 1, 0, 1), padding-block .5s cubic-bezier(0, 1, 0, 1); // Out
			transition-delay: .1s;
			z-index         : 2;
		}
	}
}

input.toggle:not(:checked)+*,
.toggle:has(input:not(:checked))+* {
	padding-block: 0;
}

%toggleopen {
	max-height    : 100vh;
	opacity       : 1;
	pointer-events: all;
	transform     : none;
	z-index       : 2;	
}

// @for $i from 1 through 40 {
// 	.tabs :has(:nth-child(#{$i}) :checked) + * > :nth-child(#{$i}) {
// 	  @extend %toggleopen;
// 	}
// }

.hoverable>li:hover>ul,
.hoverable li:has(:focus-visible)>ul,
.hoverable>ul>li:hover>ul,
.toggle.hoverable:hover+*,
.toggle:checked+*,
.toggle:has(:checked)+*,
.toggle.active+*,
.toggle-container:focus-within .toggle+*,
.toggle-container .toggle+*:hover,
.open{
	@extend %toggleopen;
}

.toggle-container:focus-within .toggle {
	pointer-events: none;
}

.tabpanels > * {
	max-height: 0;
	opacity: 0;
}

.toggle.hoverable:hover+*,
.toggle:checked+.collapse,
.toggle:has(:checked)+.collapse {
	z-index       : 4;
}

@each $breakpoint,
$breakpoint_width in $breakpoints {
	@media screen and (min-width: $breakpoint_width) {

		.toggle.#{$breakpoint}-hoverable:hover+*,
		.#{$breakpoint}-hoverable>ul>li:hover>ul,
		.#{$breakpoint}-hoverable>li:hover>ul,
		.#{$breakpoint}-hoverable li:has(:focus-visible)>ul,
		.#{$breakpoint}-open {
			max-height    : 100vh;
			opacity       : 1;
			pointer-events: all;
			transform     : none;
			z-index       : 2;
		}
	}
}